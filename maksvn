#!/bin/sh

#
# maksvn script creates folders for out of source build 
# has command line options for really clean build, creating diffs and for svn update
# has various inline options to EDIT to fit your environnement
#
# Sourcepath, qt library and destination folders can be set to user conveninence
# but sourcepath will later contain both the 'svn' subfolder and the 'build' subfolder
# ('svn' receives svn repo clone, 'build' receive build objects)
#
# Author : JLuc, for Passerelle Eco - www.passerelleco.info
# Licence : GPL
#

# Set to user convenience
sourcepath=~/dev/scribus

# EDIT to fit your Qt install
qtpath="/localbin/Qt5.4/5.4"

# Default could be execdirpath=~/bin 
# but so it got chances to be on SSD, it goes to /locabin
# EDIT to fit your exec folder
execdirpath=/localbin

# DONT Edit but keep synced : it must reflect the make process result. Probably depends on makefile.
# Once was "scribus-1.5.0.svn" but changed to "scribus-1.5.0" when 1.5  release was approaching
makeexecname="scribus-1.5.1.svn"

# EDIT to fit your langage
mylang="fr;en-us"

# EDIT to fit your cpu cores = possible parallel processes
cores=8

# Uncomment and edit to compile an old revision or to not update
# OR use the -r 19232 option in the command line
# todo : specify as an commandline option
revision="" 					# for latest svn
# revision=19507 				# to "update" to said revision
# revision="nomaj" or "noup" 	# so as to prevent update

if [ "$1" = "1.5" ] || [ "$1" = "15" ] ||  [ "$1" = "-1.5" ] || [ "$1" = "-15" ]
then
	shift
# preset config for scribus 1.5 unstable final release
	suffix=15
	makeexecname="scribus-1.5.0"
	revision=20099
else
# EDIT Sufffix for executable
# for example : when suffix is 151svn, executable will be scribus151svn
	suffix=151svn
fi

# More options for cmake. Do include the -
usercmakeopt=" -DWANT_DEBUG=1 "

# More options for make. Do include the -
usermakeopt=""

# End of user editable part
####################################################"

qtfullpath=$qtpath/gcc_64

if [ "$1" = "-?" ] || [ "$1" = "?" ] || [ "$1" = "-h" ] || [ "$1" = "h" ] || [ "$1" = "help" ] || [ "$1" = "-help" ]
then
	echo
	echo "Usage : maksvn [1.5]or[-1.5] [-h]or[-?] [diff [dest]] [-d]ou[clean] [-r #####] [-nomaj]"
	echo "with '15' option : svn fetch svn version for scribus 1.5 final unstable version and compiles it"
	echo "else : svn update the source and compile the 1.5.1svn scribus version"
	echo
	echo === OPTIONS ==================== the options order is important
	echo "15 : compiles final unstable version"
	echo "-h or -? display this help" 
	echo "-diff or diff : creates the diff file 'dest.diff' (or 'svnhead.diff' when no dest filename is specified)"
	echo "-d or clean : Deletes previous build files (not the execs)" 
	echo "-r ##### : updates to old revision n°#####  (default : update to head)"
	echo "-noup or -nomaj : dont update at all"
	echo
	echo === INFOS ======================
	svn info
	exit
fi

echo ================================

[ ! -d $execdirpath ] && mkdir $execdirpath
[ ! -d $execdirpath ] && echo "Error : exec folder '$execdirpath' does not exist. Create $execdirpath before launching maksvn" && exit

[ ! -d $sourcepath ] && mkdir $sourcepath
[ ! -d $sourcepath ] && echo "Error : source folder $sourcepath could not be created. Create it before launching maksvn" && exit

cd $sourcepath
[ ! -d build ] && mkdir build
[ ! -d build ] && echo "Error : build folder $sourcepath/build could not be created. Create it before launching maksvn" && exit
[ ! -d build/$suffix ] && mkdir build/$suffix
[ ! -d build/$suffix ] && echo "Error : build folder $sourcepath/build/$suffix could not be created. Create it before launching maksvn" && exit

# first svn checkout
if [ ! -d "svn" ]; 
then
	echo "Creating source folder and checkout svn files"
	svn co svn://scribus.net/trunk/Scribus svn
fi
[ ! -d "svn" ] && echo "Error : no svn folder could be created" &&	exit

cd svn
pwd

if [ "$1" = "diff" ] || [ "$1" = "-diff" ]
then
	if test "$2" = ""  
	then
		dest="svnhead.diff" 
	else dest="${2%.diff}.diff"
	fi
	
	echo Lets produce the diff in $dest
	destroot="$dest"
	dest="../$dest"

	if [ -f  $dest ]; 
	then
		echo "Deleting $dest" 
		rm $dest
	fi
	svn diff -x -u -x -w -x -b > $dest
	if [ -f $dest ]; 
	then
		cat $dest
		echo "===="
		echo "The diff was produced in $destroot"
		geany $dest
	else
		# echo "$dest n'a pas pu être produit alors voici en direct : "
		echo "! The diff has NOT been put in $destroot !" 
		echo "$dest could not be produced so here live"
		echo "==== !"
		svn diff  -x -u -x -w -x -b
		echo "==== !"
	fi
	exit
fi

maketarget=""
if [ "$1" = "-d" ] || [ "$1" = "d" ] || [ "$1" = "-clean" ] || [ "$1" = "clean" ] 
then 
	shift
	clean="-d"  
	maketarget="clean"
	echo
	echo "Deleting the foregoing build objects." 
	sudo rm -rf $sourcepath/build/$suffix/*
	echo "$sourcepath/build/$suffix was emptied --- it now contains :"
	ls $sourcepath/build/$suffix
	echo
# Dont delete precious previous execs
#	sudo rm -rf $execdirpath/scribus$suffix/*
	echo
fi

if [ "$1" = "-r" ]
then 
	if [ "$2" = "" ]
	then
		echo Error : revision missing after -r
		exit
	fi
	revision=$2
	shift
	shift
fi

if [ "$1" = "-noup" ] || [ "$1" = "-nomaj" ]
then
	shift
	revision="noup"
fi

if [ "$revision" = "noup" ] || [ "$revision" = "nomaj" ]
then
 	echo "NOT updating svn update"
elif [ "$revision" != "" ]
then 
	echo
	echo "! Updating to revision $revision !"  
	svn update -r $revision
else	
	echo
	echo "Updating to svn" 
	svn update
fi

echo
echo ===
cd ../build/$suffix
pwd
echo cmake to $execdirpath/scribus$suffix with qtfullpath=$qtfullpath

echo cmake ../../svn $usercmakeopt -DCMAKE_INSTALL_PREFIX:PATH=$execdirpath/scribus$suffix  -DWANT_GUI_LANG="$mylang" -DWANT_VERSIONING=1 -DQT_PREFIX=$qtfullpath -DWANT_HUNSPELL=1 -DWANT_GRAPHICSMAGICK=1 -DWANT_SVNVERSION=1 -DCMAKE_EXE_LINKER_FLAGS="-L$qtfullpath/lib -lQt5Quick -lQt5PrintSupport"
cmake ../../svn $usercmakeopt -DCMAKE_INSTALL_PREFIX:PATH=$execdirpath/scribus$suffix  -DWANT_GUI_LANG="$mylang" -DWANT_VERSIONING=1 -DQT_PREFIX=$qtfullpath -DWANT_HUNSPELL=1 -DWANT_GRAPHICSMAGICK=1 -DWANT_SVNVERSION=1 -DCMAKE_EXE_LINKER_FLAGS="-L$qtfullpath/lib -lQt5Quick -lQt5PrintSupport"

echo sudo chown -R $USER:$USER $sourcepath/build/$suffix
sudo chown -R $USER:$USER $sourcepath/build/$suffix
# sudo chmod u+rwx /usr/local/src 

echo
echo ===
echo make -j$cores $usermakeopt $maketarget
make -j$cores $usermakeopt $maketarget

echo
echo ===
echo make -j$cores install
sudo make -j$cores install

echo
echo ===

sudo unlink /usr/bin/scribus$suffix
sudo ln -s $execdirpath/scribus$suffix/bin/$makeexecname /usr/bin/scribus$suffix

cd ../../svn
echo "SVN version" `svnversion`
echo exec is $execdirpath/scribus$suffix/bin/$makeexecname
echo Run with scribus$suffix
